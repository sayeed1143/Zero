import { useState, useCallback } from "react";
import Canvas from "@/components/workspace/Canvas";
import ChatInterface from "@/components/workspace/ChatInterface";
import WorkspaceNav from "@/components/workspace/WorkspaceNav";
import Sidebar from "@/components/workspace/Sidebar";
import FloatingMic from "@/components/workspace/FloatingMic";
import QuizModal from "@/components/workspace/QuizModal";
import { useSpeechToText } from "@/hooks/useSpeechToText";
import { speak } from "@/lib/tts";
import { toast } from "@/components/ui/sonner";

const Workspace = () => {
  const [isQuizModalOpen, setIsQuizModalOpen] = useState(false);

  const handleVoiceResult = (transcript: string) => {
    toast.success("Voice input received!", {
      description: `"${transcript}"`,
    });
    // Simulate AI response
    setTimeout(() => {
      const response = `I've processed your request about: "${transcript}". Here are some visual notes on the canvas.`;
      speak(response);
      toast.message("AI Response", { description: response });
    }, 1000);
  };

  const { isListening, startListening, stopListening, isAvailable } = useSpeechToText({
    onResult: handleVoiceResult
  });

  const handleMicClick = () => {
    if (!isAvailable) {
      toast.error("Speech recognition is not available in your browser.");
      return;
    }
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  };

  const handleSendMessage = useCallback((message: string) => {
    if (message.toLowerCase().includes('/quiz')) {
        setIsQuizModalOpen(true);
        return;
    }
    toast.info("Message sent to AI", { description: `"${message}"` });
    // Simulate AI response
    setTimeout(() => {
      const response = `I'm generating content based on your message: "${message}".`;
      speak(response);
      toast.message("AI Response", { description: response });
    }, 1000);
  }, []);

  const handleGenerateQuiz = useCallback(() => {
    setIsQuizModalOpen(true);
  }, []);

  return (
    <div className="h-screen flex flex-col bg-background">
      <WorkspaceNav />
      <div className="flex-1 flex overflow-hidden">
        <Sidebar />
        <main className="flex-1 flex flex-col relative">
          <Canvas />
          <ChatInterface onSendMessage={handleSendMessage} onGenerateQuiz={handleGenerateQuiz} />
        </main>
      </div>
      <FloatingMic isListening={isListening} onClick={handleMicClick} />
      <QuizModal isOpen={isQuizModalOpen} onOpenChange={setIsQuizModalOpen} />
    </div>
  );
};

export default Workspace;
